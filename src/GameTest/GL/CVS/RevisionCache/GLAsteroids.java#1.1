/*
 * GameTest.java
 *
 * Created on August 3, 2009, 10:49 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package GameTest.GL;

import GameTest.Blast;
import GameTest.Explosion;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;

import twodapi.audio.SimpleAudioPlayer;
import twodapi.core.AnimationThread;
import twodapi.core.Frame2D;
import twodapi.core.GamePainter;
import twodapi.core.Painter;
import twodapi.core.Sprite2D;
import twodapi.effects.ScreenFade;
import twodapi.lwjgl.GLPainter;
import twodapi.lwjgl.KeyControlsGL;
import twodapi.lwjgl.SpriteGL;
import twodapi.text.Text;
import twodapi.text.TextAnnounce;


/**
 *
 * @author bsimpkins
 */
public class GLAsteroids extends GLPainter
{
    private GamePainter painter;

    private ShipSprite ship;

    private AsteroidSprite[] asteroids;

    private Blast[] blasts = new Blast[5];

    private Explosion[] explosions = new Explosion[8];

    private int lives = 3;

    private BufferedImage background;

    private int level = 1;

    private Sprite2D lilShip = new Sprite2D("/images/ship.gif");

    private Text numLivesDisplay = new Text("3",new Font("sanserif",Font.PLAIN,20),Color.GREEN,new Point(80,40));

    private Text levelDisplay = new Text("Level:  1",new Font("sanserif",Font.PLAIN,20),Color.GREEN,new Point(300,40));

    private SimpleAudioPlayer aPlayer = new SimpleAudioPlayer(new String[]{
        "sounds/explosion.wav",
        "sounds/explosion_high.wav",
        "sounds/explosion_small.wav",
        "sounds/laserfire3.wav",
        "sounds/music.wav"
    });

    private TextAnnounce announce = new TextAnnounce(new Font("sanserif",Font.PLAIN,50));

    public GLAsteroids(boolean fullscreen)
    {

        super(1024,768);

        Frame2D frame = new Frame2D(Frame2D.REG_PAINTER,1024,768,fullscreen);
        frame.getFrame().setTitle("Never Tell Me the Odds!!!");

        painter = (GamePainter)frame.getPainter();
        painter.setFrameRate(30);
        try {
            background = ImageIO.read(this.getClass().getResource("/images/purple-galaxy-stars.jpg"));
        } catch (IOException ex) {
            System.out.println("Could not load background image!!");
        }

        initAsteroids(painter);
        initBlasts(painter);
        initExplosions(painter);

        ship = new ShipSprite(painter,blasts,this);
        ship.setBilinearInterpolation(true);

        //ship.setVisible(false);

        painter.addToPaintList(this,0);
        painter.addToPaintList(ship,2);

        
        
        lilShip.setPainter(painter);
        lilShip.setScale(.5);
        lilShip.setLocation(50, 40);
        painter.addToPaintList(lilShip,3);
        painter.addToPaintList(numLivesDisplay,3);
        painter.addToPaintList(levelDisplay,3);
        
        
        painter.setBackground(Color.BLACK);
        ship.temporarilyHide();

        printSoundList();

        aPlayer.loopSound("sounds/music.wav");

        Dimension size = painter.getSize();
        announce.setColor(new Color(30,90,255,150));
        announce.setLocation(size.width/2,size.height/2);
        announce.setAnnounceTime(4);
        announce.setText("Level 1");

        painter.addToPaintList(announce,4);
        announce.showAnnounce();

    }

    @Override
    public void gameInit()
    {

    }

    private void initAsteroids(GamePainter painter)
    {
        asteroids = new AsteroidSprite[level*9];

        for (int i = 0; i < asteroids.length; i++)
        {
            asteroids[i] = new AsteroidSprite(this);
            asteroids[i].setBilinearInterpolation(true);

            asteroids[i].setScreenWrap(true, painter);

            painter.addToPaintList(asteroids[i],2);

            if (i < level)
            {
               //set location randomly
                int x = (int)(Math.random()*painter.getSize().width);
                int y = (int)(Math.random()*painter.getSize().height);

                asteroids[i].setLocation(x, y);
                asteroids[i].setVisible(true);
            }

        }
    }

    public AsteroidSprite[] getAsteroids()
    {
        return asteroids;
    }

    public void showExplosion(int x, int y)
    {
        Explosion expl = null;

        for (int i = 0; i < explosions.length; i++)
        {
            if (!explosions[i].isVisible())
            {
                expl = explosions[i];
                break;
            }
        }

        if (expl != null)
        {
            expl.setLocation(x, y);
            expl.update(0);
            expl.setVisible(true);
            expl.animateOnce();

        }
        else
        {
            System.out.println("Warning: Couldn't get an explosion from the queue to show!");
        }
    }

    private void initBlasts(Painter painter)
    {
        for (int i = 0; i < blasts.length; i++)
        {
            blasts[i] = new Blast(20,painter);
            blasts[i].setVisible(false);

            painter.addToPaintList(blasts[i],2);
        }
    }

    private void initExplosions(GamePainter painter)
    {
        for (int i = 0; i < explosions.length; i++)
        {
            explosions[i] = new Explosion(painter);
            painter.addToPaintList(explosions[i],1);
        }
    }

    private void printSoundList()
    {
        ArrayList list = aPlayer.getSoundList();

        System.out.println("\nSound list\n_______________________________");

        for (int i = 0; i < list.size(); i++)
        {
            System.out.println("   "+list.get(i));
        }

        System.out.println("");
    }

    public void update(float interpolation)
    {
        //check for ship/asteroid collisions
        if ( ship.isVisible())
        {
            for (int i = 0; i < asteroids.length; i++)
            {
                if (asteroids[i].isVisible() && ship.collidesWith(asteroids[i]))
                {
                    aPlayer.playSound("sounds/explosion_high.wav");
                    ship.explode();
                    
                }

                //check for blast/asteroid collisions
                for (int j = 0; j < blasts.length; j++)
                {
                    if (blasts[j].isVisible() && blasts[j].collidesWith(asteroids[i]))
                    {
                        asteroids[i].explode();
                        blasts[j].setVisible(false);
                        checkForNextLevel();
                        break;
                    }
                }
            }
        }    
    }

    private void checkForNextLevel()
    {
        boolean nextLevel = true;

        for (int i = 0; i < asteroids.length; i++)
        {
            if (asteroids[i].isVisible())
            {
                nextLevel = false;
                break;
            }
        }

        if (nextLevel)
        {
            level++;
            ship.temporarilyHide();
            initAsteroids(painter);
            announce.setText("Level "+level);
            announce.showAnnounce();

            levelDisplay.setText("Level:  "+level);
        }
    }

    public SimpleAudioPlayer getSoundPlayer()
    {
        return aPlayer;
    }

    public GamePainter getPainter()
    {
        return painter;
    }

    public int getNumLives()
    {
        return lives;
    }

    public void removeLife()
    {
            lives--;

            if (lives >= 0) numLivesDisplay.setText(""+lives);
    }

    public void gameOver()
    {
        Dimension size = painter.getSize();

        ScreenFade fadeOut = new ScreenFade(painter,Color.BLACK);
        painter.addToPaintList(fadeOut, 4);

        Text gameEndText = new Text("Game Over",new Font("sanserif",Font.BOLD,60),Color.RED,new Point(size.width/2,size.height/2));
        painter.addToPaintList(gameEndText,4);

        fadeOut.setFadeSpeed(.5f);
        fadeOut.fadeOut();
    }

    public void paintObject(Graphics g)
    {
        if (background != null)
        {
            g.drawImage(background, 0, 0, null);
        }
    }

    public static void main(String[] args)
    {
        boolean fullscreen = false;

        if (args != null && args.length > 0)
        {
            if (args[0].equalsIgnoreCase("-fs") || args[0].equalsIgnoreCase("-fullscreen")) fullscreen = true;
        }

        GLAsteroids gameTest = new GLAsteroids(fullscreen);


    }

    class AsteroidSprite extends Sprite2D
    {
        int moveAmt = 0;
        double moveTheta = 0d;

        double rotAmt = 0;

        private GLAsteroids game;

        private static final float SMALL_SCALE=.5f;

        private static final float MED_SCALE=.8f;

        private static final int SMALL = 1;
        private static final int MED = 2;
        private static final int LARGE = 3;

        private int relSize = LARGE;

        /** Creates a new instance of Asteroid */
        public AsteroidSprite(GLAsteroids game)
        {
            super("/images/Asteroid.gif");

            this.game = game;

            double randomAngle = 2*Math.PI*Math.random();
            double randomLength = Math.random();

            moveAmt = 50+(int)Math.round(300*randomLength);


            moveTheta = randomAngle;

            rotAmt = Math.PI/12*Math.random();

            setVisible(false);
        }

        public void explode()
        {
            setVisible(false);

            SimpleAudioPlayer aPlayer = game.getSoundPlayer();

            //If this asteroid is MED or LARGE, break it up into three smaller ones
            if (relSize > SMALL)
            {
                aPlayer.playSound("sounds/explosion.wav");

                /////We need to loop through the available asteroids and see which ones are availabe for
                //breakaway asteroids and update them

                AsteroidSprite[]asters = game.getAsteroids();

                //Count of the number of asteroids we have updated (catch max at 3)
                int asterCount = 0;

                //Incremented 2PI/3 each time an asteroid is found (so all breakaway asteroids are travelling in diff directions
                double thetaStart = 0;

                int size = this.relSize - 1;

                //find available asteroids
                for (int i = 0; i < asters.length; i++)
                {
                    AsteroidSprite a = asters[i];

                    if (!a.isVisible)
                    {
                        //Determine direction of movement semi-randomly
                        double theta = thetaStart + Math.random()*2*Math.PI/3;
                        updateAsteroid(a,theta,size);

                        thetaStart += 2*Math.PI/3;

                        asterCount++;
                        if (asterCount==3) break;
                    }
                }

                //System.out.println("num asters="+newAsters.size());

            }
            else
            {
                aPlayer.playSound("sounds/explosion_small.wav");
            }

            game.showExplosion(getLocation().x, getLocation().y);


        }

        private void updateAsteroid(AsteroidSprite a, double theta, int size)
        {

            a.setRelativeSize(size);
            if (size == SMALL) a.setScale(SMALL_SCALE);
            else if (size == MED) a.setScale(MED_SCALE);

            a.setLocation(this.getLocation().x,this.getLocation().y);

            a.setMoveAngle(theta);

            a.update(0);
            a.setVisible(true);
        }

        public void setMoveAngle(double moveTheta)
        {
            this.moveTheta = moveTheta;
        }

        public void setRelativeSize(int relSize)
        {
            this.relSize = relSize;
        }

        @Override
        public void updateState(float interpolation)
        {
            if (isVisible())
            {
                move(moveTheta,(int)(moveAmt*interpolation));
                rotate(rotAmt);
            }


        }

    }

    class ShipSprite extends SpriteGL
    {
        private KeyControlsGL keyControls;

        private GLPainter painter;

        private Blast[] blasts;

        private GLAsteroids game;

        private Ellipse2D safeBounds = new Ellipse2D.Double(0,0,250,250);

        private boolean tempHiding = false;

        private int hideDelay = 1;

        private float timer = 0f;

        private final Color hideColor = new Color(200,200,200);

        //double time = 0;

        //int update = 0;

        /** Creates a new instance of ShipSprite */
        public ShipSprite(GLPainter painter, Blast[] blasts,GLAsteroids game)
        {
            super("/images/ship.gif");

            this.painter = painter;

            this.game = game;
            this.blasts = blasts;

            keyControls = painter.getKeyControls();

            keyControls.set(KeyEvent.VK_LEFT);
            keyControls.set(KeyEvent.VK_RIGHT);
            keyControls.set(KeyEvent.VK_UP);
            keyControls.set(KeyEvent.VK_DOWN);
            keyControls.set(KeyEvent.VK_SPACE);
            keyControls.set(KeyEvent.VK_P);

            setLocation(200,200);


            setScale(.8f,.8f);

            setScreenWrap(true,painter);

            //this.setBoundsVisible(true);
        }

        public void explode()
        {
            setVisible(false);
            game.showExplosion(getLocation().x, getLocation().y);

            game.removeLife();

            if (game.getNumLives() < 0)
            {
                //Do game over sequence
                game.gameOver();
            }
            else
            {
                hideDelay = 2;
                temporarilyHide();
            }

        }

        public void temporarilyHide()
        {
            safeBounds.setFrame(getLocation().x-125, getLocation().y-125, 250, 250);
            this.setVisible(false);
            timer = 0;
            tempHiding = true;
        }

        @Override
        public void update(float interpolation)
        {
            //System.out.println("Time="+(time += interpolation) + " Update="+(update+=1));

            if (tempHiding) {
                timer += interpolation;

                if (timer > hideDelay)
                {
                    updateTempHiding();
                    return;
                }

            }

            if (keyControls.isPressed(KeyEvent.VK_LEFT))
            {
                rotate(-180/12);
            }
            else if (keyControls.isPressed(KeyEvent.VK_RIGHT))
            {
                rotate(180/12);
            }

            if (keyControls.isPressed(KeyEvent.VK_UP))
            {
                move(getRotation(),8);
            }
            else if (keyControls.isPressed(KeyEvent.VK_DOWN))
            {
                move(getRotation(),-8);
            }

            if (keyControls.isTapped(KeyEvent.VK_SPACE))
            {
                fireBlast();
            }

        }

        private void updateTempHiding()
        {
            AsteroidSprite[] asteroids = game.getAsteroids();

            boolean clear = true;

            for (int i = 0; i < asteroids.length; i++)
            {
                AsteroidSprite aster = asteroids[i];
                if (aster.isVisible() && safeBounds.intersects(aster.getCollisionBounds().getBounds2D()))
                {
                    clear = false;
                    break;
                }
            }

            if (clear) {
                tempHiding = false;
                setVisible(true);
            }

            //TODO: draw transparent circle
        }       

        public void fireBlast()
        {
            if (isVisible())
            {
                //search for invisible blast to fire
                for (int i = 0; i < blasts.length; i++)
                {
                    Blast blast = blasts[i];

                    if (!blast.isVisible())
                    {
                        game.getSoundPlayer().playSound("sounds/laserfire3.wav");

                        blast.setVisible(true);
                        blast.setLocation(getLocation());
                        blast.move(getRotation(), 30);
                        blast.setTheta(getRotation());
                        return;
                    }
                }
            }
        }

    }
}
