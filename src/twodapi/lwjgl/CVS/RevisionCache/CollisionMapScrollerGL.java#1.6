/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package twodapi.lwjgl;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import org.lwjgl.input.Keyboard;
import org.lwjgl.util.vector.Vector2f;

/**
 *
 * @author ben
 */
public class CollisionMapScrollerGL implements PaintableGL
{
    private GLPainter painter;
    private int grainSize;
    private int subImageRows,subImageCols;
    private boolean[][] mapVals;
    private int lineWidth;
    private int numLines;
    private Dimension subImageSize;
    private BufferedImage mainImage;
    private SpriteGL[][] subImages;
    private float xScroll = 0f;
    private float yScroll = 0f;

    protected Rectangle grainBound = new Rectangle();

    private float toScrollX = 0f;
    private float toScrollY = 0f;
    
    private boolean scrollingX = false;
    private boolean scrollingY = false;

    /**If true, scroll will automatically stop if scroll window reaches beginning or end of tiles*/
    private boolean scrollStopX = false;
    private boolean scrollStopY = false;

    private float parallax = 1f;

    private ArrayList<BackgroundLayerGL> background = new ArrayList();

    //Used for repeated calcs
    protected Point start = new Point();
    protected Point end = new Point();
    private final Vector2f convertPoint = new Vector2f();
    private final Point boundOrigin = new Point();
    private final Point tileBoundPoint = new Point();


    public CollisionMapScrollerGL(String inputFile, String imageFile,GLPainter painter)
    {
        this.painter = painter;

        try {
            if (!imageFile.startsWith("/")) {
                imageFile = "/" + imageFile;
            }
            URL url = this.getClass().getResource(imageFile);
            BufferedImage image = ImageIO.read(url);
            mainImage = image;
            initialize(inputFile,image);
        } catch (IOException ex)
        {
           System.err.println("CollisionMapScrollerGL: Could not load image! Failed to initialize!");
           ex.printStackTrace();
        }

    }

    protected void initialize(String file,BufferedImage image)
    {
        if (!file.startsWith("/")) {
                file = "/" + file;
            }
        InputStream input = this.getClass().getResourceAsStream(file);
        BufferedReader bufRead = new BufferedReader(new InputStreamReader(input));

        try {

            String line = "";
            for(int i = 0;i < 3;i++)
            {
                line = bufRead.readLine();
                int lineInt = Integer.parseInt(line.split("=")[1]);
                if (line.startsWith("grainSize")) grainSize = lineInt;
                else if (line.startsWith("numLines")) numLines = lineInt;
                else if (line.startsWith("lineWidth")) lineWidth = lineInt;
            }

            grainBound = new Rectangle(0,0,grainSize,grainSize);
            mapVals = new boolean[numLines][lineWidth];
            int i = 0;
            while ((line = bufRead.readLine()) != null)
            {
                char[] lineArray = line.toCharArray();
                for (int j = 0; j < lineArray.length; j++)
                {
                    mapVals[i][j] = (lineArray[j]=='1')?true:false;
                    //System.out.println("i="+i+"j="+j+": "+mapVals[i][j]);
                }
                i++;
            }
        } catch (IOException ex) {
            System.err.println("CollisionMapScrollerGL: Could not read input file: "+file);
            ex.printStackTrace();
        }
        System.out.println("Grain Size="+grainSize);
        System.out.println("Num lines="+numLines);
        System.out.println("Line Width="+lineWidth);

        //On possible default sub image size is grain size
        //subImageSize = new Dimension(grainSize,grainSize);
        //updateSubimages();
    }

    private void updateSubimages()
    {
        if (mainImage.getWidth() % subImageSize.width != 0 || mainImage.getHeight() % subImageSize.height != 0)
        {
            System.err.println("CollisionMapScrollerGL: Subimage size does not evenly go into image size! "+
                    "Image size is "+mainImage.getWidth()+"X"+mainImage.getHeight()+". Subimage size is "+
                    subImageSize.width+"X"+subImageSize.height+". Foreground rendering will likely be undesirable.");
        }

        //make subimages
        subImageCols = mainImage.getWidth()/subImageSize.width;
        subImageRows = mainImage.getHeight()/subImageSize.height;
        subImages = new SpriteGL[subImageRows][subImageCols];


        for (int i = 0; i < subImageRows;i++)
        {
            for (int j = 0; j < subImageCols; j++)
            {

                BufferedImage image = mainImage.getSubimage(j*subImageSize.width, i*subImageSize.height,
                        subImageSize.width, subImageSize.height);
                SpriteGL subImage = new SpriteGL(image,SpriteGL.NEAREST_NEIGHBOR,SpriteGL.NEAREST_NEIGHBOR);
                //subImage.setDrawBounds(true);
                subImages[i][j] = subImage;

            }
        }

    }

    public void setParallax(float parallax)
    {
        this.parallax = parallax;
    }

    public float getParallax()
    {
        return parallax;
    }

    public void addLayer(String file, Point pos)
    {
        BackgroundLayerGL layer = new BackgroundLayerGL(file,painter);

        layer.setXScroll(-pos.x);
        layer.setYScroll(-pos.y);

        background.add(layer);
    }

    public void addLayer(String file, Point pos, boolean wrapX, boolean wrapY)
    {
        BackgroundLayerGL layer = new BackgroundLayerGL(file,painter);
        layer.setWrap(wrapX, wrapY);

        layer.setXScroll(-pos.x);
        layer.setYScroll(-pos.y);

        background.add(layer);
    }

    public void setScroll(float xScroll, float yScroll)
    {
        this.xScroll = xScroll;
        this.yScroll = yScroll;
    }

    public void scroll(float xAmt, float yAmt)
    {
        toScrollX += xAmt;
        toScrollY += yAmt;
    }

    public void setScrollStops(boolean xStop, boolean yStop)
    {
        scrollStopX = xStop;
        scrollStopY = yStop;
    }

    public void setSubImageSize(int width, int height)
    {
        subImageSize = new Dimension(width,height);
        updateSubimages();
    }

    public Dimension getSubImageSize()
    {
        return subImageSize;
    }

    /**Returns true if the specified <code>Shape</code> collides with the foreground
     *
     * @param shape The <code>Shape</code> object to be checked against the foreground.
     * @return true if there is a collision
     */
    public boolean collidesWith(Shape shape)
    {
        //System.err.println("Shape bounds="+shape.getBounds().toString());
        //The origin of the shape in tile index coords

        posToIndex(shape.getBounds().x,shape.getBounds().y,boundOrigin);

        double boundWidth = shape.getBounds().getWidth();
        double boundHeight = shape.getBounds().getHeight();

        //# of tiles shape could hit
        int numTilesX = (int)Math.ceil(boundWidth/grainBound.getWidth());
        int numTilesY = (int)Math.ceil(boundHeight/grainBound.getHeight());

        //System.out.println("Checking tile area x="+boundXOrigin+" y="+boundYOrigin+" width="+numTilesX+" height="+numTilesY);

        //These checks make sure we are not going outside the array bounds, but are checking all likely tiles
        if (boundOrigin.x < 0) boundOrigin.x = 0;
        else if (boundOrigin.x + numTilesX >= lineWidth)
        {
            numTilesX = lineWidth - boundOrigin.x - 1;
        }

        if (boundOrigin.y < 0) boundOrigin.y = 0;
        else if (boundOrigin.y + numTilesY >= numLines)
        {
            numTilesY = numLines - boundOrigin.y - 1;
        }

        try{

            for (int x = boundOrigin.x; x <= boundOrigin.x + numTilesX; x++)
            {
                for (int y = boundOrigin.y; y <= boundOrigin.y + numTilesY; y++)
                {
                    if (mapVals[y][x])
                    {
                        if (shape.getBounds().intersects(getGrainBound(x,y))) return true;
                    }
                }
            }
        }catch(ArrayIndexOutOfBoundsException e)
        {

            return false;
        }

        return false;
    }

    /**Returns true if the specified <code>Shape</code> collides with the foreground. Also, the
     * supplied <code>Rectangle</code> object will be updated with the bounds of the tile that
     * is being collided with.
     *
     * @param shape The <code>Shape</code> object to be checked against the foreground.
     * @param collideTile bounds of tile that is collided with (to be updated)
     * @return true if there is a collision
     */
    public boolean collidesWith(Shape shape, Rectangle collideTile)
    {

        //System.err.println("Shape bounds="+shape.getBounds().toString());
        //The origin of the shape in tile index coords
        posToIndex(shape.getBounds().x,shape.getBounds().y,boundOrigin);

        double boundWidth = shape.getBounds().getWidth();
        double boundHeight = shape.getBounds().getHeight();

        //# of tiles shape could hit
        int numTilesX = (int)Math.ceil(boundWidth/grainBound.getWidth());
        int numTilesY = (int)Math.ceil(boundHeight/grainBound.getHeight());

        //These checks make sure we are not going outside the array bounds, but are checking all likely tiles
        if (boundOrigin.x < 0) boundOrigin.x = 0;
        else if (boundOrigin.x + numTilesX >= lineWidth)
        {
            numTilesX = lineWidth - boundOrigin.x - 1;
        }

        if (boundOrigin.y < 0) boundOrigin.y = 0;
        else if (boundOrigin.y + numTilesY >= numLines)
        {
            numTilesY = numLines - boundOrigin.y - 1;
        }


        //System.out.println("Checking tile area x="+boundXOrigin+" y="+boundYOrigin+" width="+numTilesX+" height="+numTilesY);

        try
        {

            for (int x = boundOrigin.x; x <= boundOrigin.x + numTilesX; x++)
            {
                for (int y = boundOrigin.y; y <= boundOrigin.y + numTilesY; y++)
                {
                    if (mapVals[y][x])
                    {
                        if (shape.getBounds().intersects(getGrainBound(x,y)))
                        {
                            if (collideTile == null) collideTile = new Rectangle();
                            collideTile.setRect(grainBound);
                            //System.out.println("COllideTile="+collideTile.toString());
                            return true;
                        }
                    }
                }
            }
        }catch(ArrayIndexOutOfBoundsException e)
        {

            return false;
        }

        return false;
    }

    public void draw(float interpolation)
    {
        //If subimages still haven't been made, default to grain size
        if (subImageSize == null)
        {
            System.out.println("CollisionMapScrollerGL: Sub image size not set. Defaulting to grain size: "+grainSize+"X"+grainSize);
            subImageSize = new Dimension(grainSize,grainSize);
            updateSubimages();
        }

        update();

         //Paint background back to front
        for (int i = background.size() - 1; i >= 0; i--)
        {
            background.get(i).draw(interpolation);
        }

        //Only want to paint tiles that are on the screen. Get tile index range for these.
        start.x = (int)Math.floor(xScroll/subImageSize.width);
        end.x = (int)Math.ceil((xScroll + painter.getSize().width)/subImageSize.width);

        start.y = (int)Math.floor(yScroll/subImageSize.height);
        end.y = (int)Math.ceil((yScroll + painter.getSize().height)/subImageSize.height);

        if (start.x < 0){ //TODO: Insert code for wrapping!
            start.x = 0;
        }

        //Tile set might me smaller than screen size. If so, set xEnd to end of tiles.
        if (end.x > subImageCols){//TODO: Insert code for wrapping!
            end.x = subImageCols;
        }

        if (start.y < 0){ //TODO: Insert code for wrapping!
            start.y = 0;
        }

        //Tile set might me smaller than screen size. If so, set xEnd to end of tiles.
        if (end.y > subImageRows){//TODO: Insert code for wrapping!
            end.y = subImageRows;
        }

         for (int x = start.x; x < end.x; x++)
        {
            for (int y = start.y; y < end.y; y++)
            {
                imageIndexToPos(x,y,convertPoint);
                //System.out.println("Drawing tile at x="+convertPoint.x);

                SpriteGL subImage = subImages[y][x];

                if (subImage != null)
                {

                    subImage.setLocation(convertPoint.x+subImageSize.width/2,convertPoint.y+subImageSize.height/2);
                    //System.out.println("x="+x+" y="+y+" loc="+subImage.getLocation().toString());
                    //System.out.println("Size="+subImage.getSize().toString());
                    subImage.draw(interpolation);
                }

            }
        }
    }

    private void update()
    {
        if (toScrollX != 0f)
        {


            //System.out.println("To scrollX="+toScrollX);

            if (scrollStopX)
            {
                //Keep window from moving out of level area
                if (xScroll + toScrollX >= 0f && xScroll + toScrollX <= lineWidth*subImageSize.width - painter.getSize().width)
                {
                    scrollingX = true;
                    //It is more intuitive to make positive scroll to the right
                    xScroll += toScrollX;

                }
                else{
                    //scrolling = false;
                }
            }
            else
            {
                scrollingX = true;
                //It is more intuitive to make positive scroll to the right
                xScroll += toScrollX;
            }


            //update background
            float prevScroll = toScrollX;

            //Update background front to back. Scroll is based on parallax function (scroll=parallax^layer)
            for (int i = 0; i < background.size(); i++)
            {
                BackgroundLayerGL layer = background.get(i);

                prevScroll = prevScroll * parallax;
                layer.scrollX(prevScroll);
                //layer.scroll((float)(p+1)*(toScroll*parallax));


                //layer.draw(0);
            }
            toScrollX = 0;
        }
        else
        {
            scrollingX = false;
        }

        if (toScrollY != 0f)
        {
            //System.out.println("To scroll="+toScroll);

            if (scrollStopY)
            {
                //Keep window from moving out of level area
                if (yScroll + toScrollY >= 0f && yScroll + toScrollY <= numLines*subImageSize.height - painter.getSize().height)
                {
                    scrollingY = true;
                    //It is more intuitive to make positive scroll to the right
                    yScroll += toScrollY;

                }
                else{
                    //scrolling = false;
                }
            }
            else
            {
                scrollingY = true;
                //It is more intuitive to make positive scroll to the right
                yScroll += toScrollY;
            }

            //update background
            float prevScroll = toScrollY;

            //Update background front to back. Scroll is based on parallax function (scroll=parallax^layer)
            for (int i = 0; i < background.size(); i++)
            {
                BackgroundLayerGL layer = background.get(i);

                prevScroll = prevScroll * parallax;
                layer.scrollY(prevScroll);
                //layer.scroll((float)(p+1)*(toScroll*parallax));


                //layer.draw(0);
            }

            toScrollY = 0;
        }
        else
        {
            scrollingY = false;
        }
    }

    /**Converts an tile index to location in the panel
     *
     * @param xIndex The tile x index
     * * @param yIndex The tile y index
     * @return panel location
     */
    public Point indexToPos(int xIndex, int yIndex)
    {
        Point point = new Point();


        point.setLocation((int)Math.round(xIndex*grainSize - xScroll),
                (int)Math.round(yIndex*grainSize - yScroll));

        return point;
    }

    /**Converts an tile index to location in the panel (this version doesn't create
     * a new return <code>Point</code> object, but instead returns conversion results
     * in specified <code>returnPoint</code>. Best for repeated calculations.
     *
     * @param xIndex The tile x index
     * * @param yIndex The tile y index
     * @param returnPoint non-null Point object that will capture resulting position
     */
    public void indexToPos(int xIndex, int yIndex, Point returnPoint)
    {

        returnPoint.setLocation((int)Math.round(xIndex*grainSize - xScroll),
                (int)Math.round(yIndex*grainSize - yScroll));
    }

    /**Converts an panel location to a tile index
     *
     * @param xPos panel x location
     * @param yPos panel y location
     * @return tile index
     */

    /**Converts an tile index to location in the panel
     *
     * @param xIndex The tile x index
     * * @param yIndex The tile y index
     * @return panel location
     */
    public Point imageIndexToPos(int xIndex, int yIndex)
    {
        Point point = new Point();


        point.setLocation((int)Math.round(xIndex*subImageSize.width - xScroll),
                (int)Math.round(yIndex*subImageSize.height - yScroll));

        return point;
    }

    /**Converts an tile index to location in the panel (this version doesn't create
     * a new return <code>Point</code> object, but instead returns conversion results
     * in specified <code>returnPoint</code>. Best for repeated calculations.
     *
     * @param xIndex The tile x index
     * * @param yIndex The tile y index
     * @param returnPoint non-null Point object that will capture resulting position
     */
    public void imageIndexToPos(int xIndex, int yIndex, Vector2f returnPoint)
    {

        returnPoint.set(xIndex*subImageSize.width - xScroll,
                yIndex*subImageSize.height - yScroll);
    }

    /**Converts an panel location to a tile index
     *
     * @param xPos panel x location
     * @param yPos panel y location
     * @return tile index
     */

    public Point posToIndex(int xPos, int yPos)
    {
        Point point = new Point();

        point.x = (int)Math.floor(((float)xPos+xScroll)/grainBound.getWidth());
        point.y = (int)Math.floor(((float)yPos+yScroll)/grainBound.getHeight());

        //for now, returns floor
        return point;
    }

    /**Converts an panel location to a tile index (this version doesn't create
     * a new return <code>Point</code> object, but instead returns conversion results
     * in specified <code>returnPoint</code>. Best for repeated calculations.
     *
     * @param xPos panel x location
     * @param yPos panel y location
     * @param returnPoint non-null Point object that will capture resulting index
     */
    public void posToIndex(int xPos, int yPos, Point returnPoint)
    {

        returnPoint.x = (int)Math.floor(((float)xPos+xScroll)/grainBound.getWidth());
        returnPoint.y = (int)Math.floor(((float)yPos+yScroll)/grainBound.getHeight());

    }

    /**returns the bounds of a tile. Position is in world coordinates (not panel coordinates
     * because x position has not been adjusted for scroll.
     * @param xIndex
     * @param yIndex
     * @return bounds of tile
     */
    public Rectangle getGrainBound(int xIndex, int yIndex)
    {
        indexToPos(xIndex,yIndex,tileBoundPoint);

        grainBound.setLocation(tileBoundPoint);

        return grainBound;
    }

    public static void main(String[] args)
    {
        GLPainter painter = new GLPainter(1000,700)
        {
            CollisionMapScrollerGL scroller;
            SpriteGL ship;

            @Override
            public void gameInit()
            {
                
                //setFullscreen(true);
                scroller = new CollisionMapScrollerGL("/files/MapFactoryOut.txt","/images/MapScrollerTestImage.png",this);
                scroller.addLayer("/images/stars/stars2b.gif",new Point(0,0),true,true);
                scroller.setParallax(.2f);
                scroller.setSubImageSize(500, 700);
                scroller.setScrollStops(false, false);
                addToPaintList(scroller);

                ship = new SpriteGL("/images/ship.gif");
                ship.setLocation(500, 300);

                addToPaintList(ship);
            }

            public void gameUpdate(float interpolation)
            {
                if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) scroller.scroll(interpolation*150,0f);
                else if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) scroller.scroll(-interpolation*150,0f);

                if (Keyboard.isKeyDown(Keyboard.KEY_UP)) scroller.scroll(0f,-interpolation*300f);
                else if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) scroller.scroll(0f,interpolation*300f);

                if (scroller.collidesWith(ship.getCollisionBounds()))
                {
                    ship.setDrawBounds(true);
                }
                else
                {
                    ship.setDrawBounds(false);
                }
            }
        };
        painter.start();

    }
    

    
}
