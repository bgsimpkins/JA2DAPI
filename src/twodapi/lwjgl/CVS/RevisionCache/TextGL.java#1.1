/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package twodapi.lwjgl;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.util.Hashtable;
import javax.swing.SwingUtilities;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.vector.Vector2f;

/**
 *
        throw new UnsupportedOperationException("Not supported yet.");

 * @author ben
 */
public class TextGL implements PaintableGL
{
    private String text = "";
    private Font font;
    private Color color;
    private FontMetrics fm;

    private Texture texture;

    private static BufferedImage tempImage;

    /** The colour model including alpha for the GL image */
    private static ColorModel glAlphaColorModel;
    private static ColorModel glColorModel;

    private Dimension size = new Dimension();

    private boolean visible = true;

    private Vector2f location = new Vector2f();

    private ByteBuffer imageBuffer;

    public TextGL(String text, Font font, Color color)
    {
        this.text = text;
        this.font = font;
        this.color = color;

        glAlphaColorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                new int[] {8,8,8,8},
                true,
                false,
                ComponentColorModel.TRANSLUCENT,
                DataBuffer.TYPE_BYTE);

        glColorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                new int[] {8,8,8,0},
                false,
                false,
                ComponentColorModel.OPAQUE,
                DataBuffer.TYPE_BYTE);

        init();
    }

    private void init()
    {
        

        int target = GL11.GL_TEXTURE_2D; // target
        int dstPixelFormat = GL11.GL_RGBA;     // dst pixel format
        int minFilter = GL11.GL_LINEAR; // minification filter
        int magFilter = GL11.GL_LINEAR;  //magnification filter

        int srcPixelFormat = 0;

        // create the texture ID for this texture

        ByteBuffer temp = ByteBuffer.allocateDirect(4);
        temp.order(ByteOrder.nativeOrder());

        IntBuffer tmp = temp.asIntBuffer();

        GL11.glGenTextures(tmp);
        int textureID = tmp.get(0);
        texture = new Texture(target,textureID);

        // bind this texture
        GL11.glBindTexture(target, textureID);

        //Use temp image to set font and get font metrics
        tempImage = new BufferedImage(1,1,BufferedImage.TRANSLUCENT);
        Graphics g = tempImage.getGraphics();
        //g.setColor(color);
        g.setFont(font);
        //g.drawString(text, 0, 10);
        //g.dispose();
        fm = g.getFontMetrics();


        int texWidth = SwingUtilities.computeStringWidth(fm, text);
        int texHeight = fm.getHeight();

        size.setSize(texWidth,texHeight);

        texture.setWidth(texWidth);
        texture.setHeight(texHeight);

        WritableRaster raster;
        BufferedImage texImage;

        srcPixelFormat = GL11.GL_RGBA;


        int width = 2;
        int height = 2;

        // find the closest power of 2 for the width and height
        // of the produced texture
        while (width < texWidth) {
            width *= 2;
        }
        while (height < texHeight) {
            height *= 2;
        }

        texture.setTextureHeight(height);
        texture.setTextureWidth(width);

        raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,width,height,4,null);
        texImage = new BufferedImage(glAlphaColorModel,raster,false,new Hashtable());

        g = texImage.getGraphics();
        //g.setFont(font);
        //g.setColor(color);
        g.setColor(new Color(0f,0f,0f,0f));
        g.fillRect(0,0,width,height);
        g.setColor(color);
        g.setFont(font);
        g.drawString(text, 0,texHeight-1);
        //g.drawImage(tempImage, 0, 0, null);

        byte[] data = ((DataBufferByte) texImage.getRaster().getDataBuffer()).getData();
       
        imageBuffer =  ByteBuffer.allocateDirect(data.length);
        imageBuffer.order(ByteOrder.nativeOrder());
        imageBuffer.put(data, 0, data.length);
        imageBuffer.flip();

        if (target == GL11.GL_TEXTURE_2D)
        {
            GL11.glTexParameteri(target, GL11.GL_TEXTURE_MIN_FILTER, minFilter);
            GL11.glTexParameteri(target, GL11.GL_TEXTURE_MAG_FILTER, magFilter);
        }

        // produce a texture from the byte buffer
        GL11.glTexImage2D(target,
                      0,
                      dstPixelFormat,
                      get2Fold(texImage.getWidth()),
                      get2Fold(texImage.getHeight()),
                      0,
                      srcPixelFormat,
                      GL11.GL_UNSIGNED_BYTE,
                      imageBuffer );

    }

    /**
     * Get the closest greater power of 2 to the fold number
     *
     * @param fold The target number
     * @return The power of 2
     */
    private int get2Fold(int fold) {
        int ret = 2;
        while (ret < fold) {
            ret *= 2;
        }
        return ret;
    }

    public void draw(float interpolation) 
    {
        if (!visible) return;

        GL11.glPushMatrix();

        GL11.glTranslatef(location.x, location.y, 0);

        //GL11.glColor3f(1, 1,1);

        //GL11.glRasterPos2f(0, 0);
        //GL11.glDrawPixels(size.width,size.height, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, imageBuffer);

        // bind to the appropriate texture for this sprite
        texture.bind();

        
         // draw a quad textured to match the sprite
    	GL11.glBegin(GL11.GL_QUADS);
		{
            GL11.glTexCoord2f(0, 0);
            GL11.glVertex2f(0, 0);
            GL11.glTexCoord2f(0, texture.getHeight());
            GL11.glVertex2f(0, size.height);
            GL11.glTexCoord2f(texture.getWidth(), texture.getHeight());
            GL11.glVertex2f(size.width,size.height);
            GL11.glTexCoord2f(texture.getWidth(), 0);
            GL11.glVertex2f(size.width,0);
		}
		GL11.glEnd();

         // restore the model view matrix to prevent contamination
		 GL11.glPopMatrix();
    }

    

    /**
     * @return the location
     */
    public Vector2f getLocation() {
        return location;
    }

    /**
     * @param location the location to set
     */
    public void setLocation(Vector2f location) {
        this.location = location;
    }

    /**
     * @param location the location to set
     */
    public void setLocation(float x, float y) {
        this.location.set(x, y);
    }

    public static void main(String[] args)
    {
        new GLPainter(1024,768)
        {
            TextGL text;
            public void gameInit()
            {
                 this.setBackground("/images/purple-galaxy-stars.jpg");
                 text = new TextGL("Some text and shit and more shit",new Font("serif",Font.PLAIN,50),Color.RED);
                 text.setLocation(100,100);
                 addToPaintList(text);
                 System.out.println("Size="+text.size);

            }
            public void gameUpdate(float interpolation)
            {
                text.setLocation(text.getLocation().x+1,text.getLocation().y+1);
            }

        };

        
    }
}
