/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package twodapi.lwjgl;

import java.awt.Dimension;
import java.util.ArrayList;
import twodapi.core.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;

/**
 *
 * @author ben
 */
public class GLPainter
{
    private AnimationThread thread;
    private boolean gameRunning = true;
    private boolean readyToUpdate = true;

    private ArrayList<PaintableGL> paintList;

    private long prevTime = 0l;

    private SpriteGL background = null;

    private Dimension size;

    public GLPainter(int width, int height)
    {
        size = new Dimension(width,height);
        init(width,height);
        //thread = new AnimationThread();
        //thread.addListener(this);

        
    }

    public void add(PaintableGL p)
    {
        paintList.add(p);
    }

    public void start()
    {
        if (!thread.isRunning())
        {
            System.out.println("GLPainter: Starting animation thread.");
            thread.start();
        }
    }

    private void init(int width, int height)
    {
        try {
            setDisplayMode(width,height);
            Display.create();
            // grab the mouse, dont want that hideous cursor when we're playing!
            //Mouse.setGrabbed(true);
            // enable textures since we're going to use these for our sprites
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            //GL11.glEnable(GL11.GL_LIGHTING);

            GL11.glEnable(GL11.GL_BLEND); // Enabled blending
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA); // selects blending method
            GL11.glEnable(GL11.GL_ALPHA_TEST); // allows alpha channels or transperancy
            //GL11.glAlphaFunc(GL11.GL_GREATER, 0.1f); // sets aplha function
            // disable the OpenGL depth test since we're rendering 2D graphics
            GL11.glDisable(GL11.GL_DEPTH_TEST);
            GL11.glMatrixMode(GL11.GL_PROJECTION);
            GL11.glLoadIdentity();
            GL11.glOrtho(0, width, height, 0, -1, 1);

        } catch (LWJGLException ex) {
            Logger.getLogger(GLPainter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        paintList = new ArrayList();

        gameInit();

        gameLoop();
    }

    private void gameLoop()
    {
        
        while(gameRunning)
        {
            if (readyToUpdate)
            {
                GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
                GL11.glMatrixMode(GL11.GL_MODELVIEW);
                GL11.glLoadIdentity();

                //System.out.println("Size of paintList="+paintList.size());

                if (prevTime == 0l)
                {
                    prevTime = System.nanoTime();
                }

                float interpolation = (System.nanoTime()-prevTime)/1000000f;
                prevTime = System.nanoTime();

                if (background != null) background.draw(interpolation);

                synchronized(paintList)
                {
                    //TODO: Call paintObject() to all paintables
                    for (int i = 0; i < paintList.size(); i++)
                    {
                        paintList.get(i).draw(interpolation);
                    }
                }

                // update window contents
                Display.update();


                //System.out.println("Render!!");

                if(Display.isCloseRequested() || Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {
                    Display.destroy();
                }
                //readyToUpdate = false;

            }
           
        }
    }

    public void setBackground(String imagePath)
    {

        SpriteGL sprite = new SpriteGL(imagePath);
        sprite.setLocation(size.width/2, size.height/2);

        float xScale = (float)size.width/(float)sprite.getSize().width;
        float yScale = (float)size.height/(float)sprite.getSize().height;
        System.out.println("xScale="+xScale+" yScale="+yScale);
        sprite.setScale(xScale, yScale);

        this.background = sprite;
  
    }

    protected void gameInit(){};

    /**
	 * Sets the display mode for fullscreen mode
	 */
	private boolean setDisplayMode(int width, int height) {
		try {
			// get modes
			DisplayMode[] dm = org.lwjgl.util.Display.getAvailableDisplayModes(
					width, height, -1, -1, -1, -1, 60, 60);

			org.lwjgl.util.Display.setDisplayMode(dm, new String[] {
					"width=" + width,
					"height=" + height,
					"freq=" + 60,
					"bpp="
							+ org.lwjgl.opengl.Display.getDisplayMode()
									.getBitsPerPixel() });

			return true;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Unable to enter fullscreen, continuing in windowed mode");
		}

		return false;
	}

    public static void main(String[] args)
    {
        GLPainter painter = new GLPainter(800,600)
        {
            @Override
            public void gameInit()
            {
                setBackground("/images/purple-galaxy-stars.jpg");

                SpriteGL sprite = new SpriteGL("/images/Asteroid.gif")
                {
                    public void update(float interpolation)
                    {
                        float toScale = 1+(interpolation/5000f);
                        scale(toScale,toScale);
                        move(3*Math.PI/4,interpolation/15f);
                        rotate((float)(interpolation/(Math.PI)));
                    }
                };
                sprite.setDrawBounds(true);
                sprite.setTransparency(.9f);
                sprite.setLocation(110, 110);
                //sprite.setScale(2);
                add(sprite);
                /*SpriteGL dot = new SpriteGL("/images/orange_dot.png")
                {
                    public void update(float interpolation)
                    {
                        move(3*Math.PI/4,interpolation/15f);
                    }
                };
                dot.setLocation(110, 110);
                add(dot);*/
            }
        };
        
        

        //painter.start();



    }
}
